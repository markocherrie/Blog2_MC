<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Scraping on Data Scientist</title>
    <link>/tags/web-scraping/</link>
    <description>Recent content in Web Scraping on Data Scientist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 Mark Cherrie</copyright>
    <lastBuildDate>Tue, 22 May 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/web-scraping/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What are the optional courses like for UoE Geosciences Msc students?</title>
      <link>/post/msccourses/</link>
      <pubDate>Tue, 22 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/msccourses/</guid>
      <description>&lt;p&gt;The aim was to understand more about the optional courses available for Geosciences MSc students. This meant building a dataframe that contained the interesting bits of information available on the University of Edinburgh website so that I could query it to find out answers to questions such as: How many 10 credit courses are available? Which degree cluster do the courses below to and where do they overlap? What kind of topics/skills are going to be taught? and so on.&lt;/p&gt;
&lt;p&gt;The first thing to do was to download the data from the University of Edinburgh website. Here is the code, which first builds the URLâ€™s that we need and then scrapes the relevant info one-by-one into a dataframe:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;############### DATA COLLECTION #########################

## scaping the edinburgh university website
library(rvest)
# Gather the optional courses for Earth Observation and Geoinformation Management
MScOptionsURLS&amp;lt;-function(MSc){
if(MSc==&amp;quot;EOGM&amp;quot;){
  MSc&amp;lt;-&amp;quot;https://www.ed.ac.uk/geosciences/postgraduate/taught-masters/msc-earth-observation/structure-teaching-assessment/optional-courses&amp;quot;
  url&amp;lt;-MSc %&amp;gt;%
  read_html()%&amp;gt;%
  html_nodes(&amp;#39;#block-system-main p:nth-child(1) a , p+ p a&amp;#39;)%&amp;gt;%
  html_attr(&amp;#39;href&amp;#39;)
  } else if(MSc==&amp;quot;GIS&amp;quot;){
  MSc&amp;lt;-&amp;quot;https://www.ed.ac.uk/geosciences/postgraduate/taught-masters/geographical-information-science/structure-teaching-assessment/optional-courses&amp;quot;
  url&amp;lt;-MSc %&amp;gt;%
    read_html()%&amp;gt;%
    html_nodes(&amp;#39;#block-system-main p:nth-child(1) a , p+ p a&amp;#39;)%&amp;gt;%
    html_attr(&amp;#39;href&amp;#39;)
  }else if(MSc==&amp;quot;ARCH&amp;quot;){
  MSc&amp;lt;-&amp;quot;https://www.ed.ac.uk/geosciences/postgraduate/taught-masters/msc-gis-and-archaeology/structure-teaching-and-assessment/optional-courses&amp;quot;
  url&amp;lt;-MSc %&amp;gt;%
    read_html()%&amp;gt;%
    html_nodes(&amp;#39;.col-sm-9 , p+ p a&amp;#39;)%&amp;gt;%
    html_attr(&amp;#39;href&amp;#39;)
  # not perfect, but get the dpt links
  url&amp;lt;-url[3:10]
  # weird, not picking up the final two, must be formatted differently, quick fix
  url[9]&amp;lt;-&amp;quot;http://www.drps.ed.ac.uk/17-18/dpt/cxpghc11412.htm&amp;quot;
  url[10]&amp;lt;-&amp;quot;http://www.drps.ed.ac.uk/17-18/dpt/cxpghc11075.htm&amp;quot;
  }else {
    &amp;quot;Pick a MSc course that&amp;#39;s in the Spatial Informatics and Earth Observation cluster&amp;quot;
  }
url&amp;lt;-as.data.frame(url)
colnames(url)&amp;lt;-&amp;quot;url&amp;quot;
url$url&amp;lt;-as.character(url$url)
return(url)
}

# Let&amp;#39;s do it for the 3 MSc courses
EOGM_options&amp;lt;-MScOptionsURLS(MSc = &amp;quot;EOGM&amp;quot;)
GIS_options&amp;lt;-MScOptionsURLS(MSc = &amp;quot;GIS&amp;quot;)
ARCH_options&amp;lt;-MScOptionsURLS(MSc = &amp;quot;ARCH&amp;quot;)

# Now let&amp;#39;s scrape the optional courses pages
eduniscraper&amp;lt;-function(url){
  Urlcatch&amp;lt;-tryCatch({
    # Name of course
    Name&amp;lt;-tryCatch({
      Name&amp;lt;-url %&amp;gt;%
        read_html() %&amp;gt;%
        html_node(&amp;quot;#sitspagetitle&amp;quot;) %&amp;gt;%
        html_text()
     #Name&amp;lt;-gsub(&amp;quot;Undergraduate Course:|Postgraduate Course: &amp;quot;, &amp;quot;&amp;quot;, Name)
    }, error=function(e){
      Name&amp;lt;-NA}
    )
    
    # Get the whole table
    tableinfo&amp;lt;-url %&amp;gt;%
      read_html() %&amp;gt;%
      html_nodes(&amp;#39;.sitstablegrid&amp;#39;) %&amp;gt;%
      html_text()
    
    ## Credits
    SCQFcredits&amp;lt;-tryCatch({
      subtable&amp;lt;-tableinfo[gregexpr(pattern =&amp;#39;SCQF Credits&amp;#39;,tableinfo)&amp;gt;1]
      start&amp;lt;-gregexpr(pattern =&amp;#39;SCQF Credits&amp;#39;,subtable)[[1]][1]+12
      end&amp;lt;-gregexpr(pattern =&amp;#39;SCQF Credits&amp;#39;,subtable)[[1]][1]+13
      SCQFcredits&amp;lt;-as.numeric(substring(subtable, start,end))
    }, error=function(e){
      SCQFcredits&amp;lt;-NA}
    )
    
    ## Time
    Time&amp;lt;-tryCatch({
      subtable&amp;lt;-tableinfo[gregexpr(pattern =&amp;#39;Total Hours&amp;#39;,tableinfo)&amp;gt;1]
      start&amp;lt;-gregexpr(pattern =&amp;#39;Total Hours&amp;#39;,subtable)[[1]][1]
      end&amp;lt;-gregexpr(pattern =&amp;#39;Assessment \\(Further Info\\)&amp;#39;,subtable)[[1]][1]-1
      Time&amp;lt;-substring(subtable, start,end)
      Time&amp;lt;-gsub(&amp;quot;[\n]|:|\\)|\\(\\)|W|Assessment|(Further Info)|&amp;quot;, &amp;quot;&amp;quot;, Time)
      Time&amp;lt;-gsub(&amp;quot;\\(&amp;quot;, &amp;quot;,&amp;quot;, Time)
    }, error=function(e){
      Time&amp;lt;-NA}
    )
    
    ## Assessment
    assessment&amp;lt;-tryCatch({
      subtable&amp;lt;-tableinfo[gregexpr(pattern =&amp;#39;Written Exam&amp;#39;,tableinfo)&amp;gt;1]
      start&amp;lt;-gregexpr(pattern =&amp;#39;Written Exam&amp;#39;,subtable)[[1]][1]
      end&amp;lt;-start+55
      assessment&amp;lt;-substring(subtable, start,end)
      assessment&amp;lt;-gsub(&amp;quot; |[\t]|-|[\n]&amp;quot;, &amp;quot;&amp;quot;, assessment)
      assessment&amp;lt;-gsub(&amp;quot;WrittenExam|Coursework|PracticalExam&amp;quot;, &amp;quot;&amp;quot;, assessment)
      assessment&amp;lt;-gsub(&amp;quot;%&amp;quot;, &amp;quot;&amp;quot;, assessment)
      WrittenExam=as.numeric(unlist(strsplit(assessment, &amp;quot;,&amp;quot;))[1])
      Coursework=as.numeric(unlist(strsplit(assessment, &amp;quot;,&amp;quot;))[2])
      PracticalExam=as.numeric(unlist(strsplit(assessment, &amp;quot;,&amp;quot;))[3])
    }, error=function(e){
      WrittenExam&amp;lt;-NA
      Coursework&amp;lt;-NA
      PracticalExam&amp;lt;-NA}
    )
    
    # learning outcomes
    learningoutcomes&amp;lt;-tryCatch({
      learningoutcomes&amp;lt;-tableinfo[gregexpr(pattern =&amp;#39;By the end of this course students will be able to|On completion of this course|On completion of the course|Students will be able to:&amp;#39;,tableinfo)&amp;gt;1][2]
      #if (is.na(learningoutcomes)){
      #learningoutcomes&amp;lt;-tableinfo[gregexpr(pattern =&amp;#39;On completion of this course|On completion of the course|Students will be able to:&amp;#39;,tableinfo)&amp;gt;1][1]
      #}
      learningoutcomes&amp;lt;-gsub(&amp;quot;Learning Outcomes|[\t]|-|[\n]&amp;quot;, &amp;quot;&amp;quot;, learningoutcomes)
    }, error=function(e){
      learningoutcomes&amp;lt;-NA}
    )
    
    ## Skills
    skills&amp;lt;-tryCatch({
      subtable&amp;lt;-tableinfo[gregexpr(pattern =&amp;#39;Graduate Attributes and Skills&amp;#39;,tableinfo)&amp;gt;1][2]
      start&amp;lt;-gregexpr(pattern =&amp;#39;Graduate Attributes and Skills&amp;#39;,subtable)[[1]][1]
      end&amp;lt;-gregexpr(pattern =&amp;#39;Special Arrangements|Keywords|Additional Class Delivery Information&amp;#39;,subtable)[[1]][1]-1
      skills&amp;lt;-substring(subtable, start,end)
      skills&amp;lt;-gsub(&amp;quot;Graduate Attributes and Skills|[\t]|-|[\n]&amp;quot;, &amp;quot;&amp;quot;, skills)
    }, error=function(e){
      skills&amp;lt;-NA}
    )
    
    df&amp;lt;-data.frame(Name, url, SCQFcredits, Time, learningoutcomes, skills, WrittenExam, Coursework, PracticalExam)
    #write.csv(df, paste0(&amp;quot;data/&amp;quot;, url, &amp;quot;.csv&amp;quot;), row.names=F)
    return(df)
  },error=function(e){
    df&amp;lt;-data.frame(Name=NA, url=url, SCQFcredits=NA, Time=NA, learningoutcomes=NA, skills=NA, WrittenExam=NA, Coursework=NA, PracticalExam=NA)}
  )
}

# test
url=&amp;quot;http://www.drps.ed.ac.uk/17-18/dpt/cxpghc11412.htm&amp;quot;
test&amp;lt;-eduniscraper(url)

# loop
library(plyr)
# Technologies for Sustainable Energy, i.e. number 6, doesn&amp;#39;t work
#EOGM_options &amp;lt;- subset(EOGM_options, url!= &amp;quot;http://www.drps.ed.ac.uk/16-17/dpt/cxpgee10001.htm&amp;quot;)
#Put in error handling instead
EOGM_df&amp;lt;-mdply(EOGM_options, eduniscraper)
GIS_df&amp;lt;-mdply(GIS_options, eduniscraper)
ARCH_df&amp;lt;-mdply(ARCH_options, eduniscraper)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next step was to apply some cleaning, this was a iterative process of identifying issues with the output above and applying correction. Have a look at the code comments for more details:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;############### DATA CLEANING #########################

# master data
EOGM_df$cluster&amp;lt;-&amp;quot;EOGM&amp;quot;
GIS_df$cluster&amp;lt;-&amp;quot;GIS&amp;quot;
ARCH_df$cluster&amp;lt;-&amp;quot;ARCH&amp;quot;
master_df&amp;lt;-rbind(EOGM_df, GIS_df, ARCH_df)

# 19 courses are duplicates
library(dplyr)
master_df&amp;lt;-master_df %&amp;gt;% 
  group_by(url) %&amp;gt;% 
  mutate(cluster_group = paste0(cluster, collapse = &amp;quot;,&amp;quot;)) 
master_df&amp;lt;-master_df[!duplicated(master_df$Name),]
master_df$cluster&amp;lt;-NULL

# 3 course links don&amp;#39;t work, but only one remains,
# as it is considered &amp;#39;unique in above
master_df&amp;lt;-master_df[!is.na(master_df$Name),]


# Code NA to not entered
master_df[is.na(master_df)]&amp;lt;-&amp;quot;Not Entered&amp;quot;

# postgrad or undergrad
master_df$coursetype&amp;lt;-ifelse(grepl(&amp;quot;Undergraduate&amp;quot;, master_df$Name), &amp;quot;U&amp;quot;, &amp;quot;P&amp;quot;)
master_df$Name&amp;lt;-gsub(&amp;quot;Undergraduate Course:|Postgraduate Course:&amp;quot;, &amp;quot;&amp;quot;, master_df$Name)

# get time vars
result&amp;lt;-list()

for(i in 1:33){
Time=unlist(strsplit(master_df$Time[i], &amp;quot;,&amp;quot;))
Time&amp;lt;-gsub(&amp;quot; &amp;quot;, &amp;quot;&amp;quot;, Time)
Time&amp;lt;-as.data.frame(Time)
colnames(Time)&amp;lt;-&amp;quot;TimeVars&amp;quot;
library(tidyr)
Time&amp;lt;-Time %&amp;gt;%
separate(TimeVars, 
         into = c(&amp;quot;text&amp;quot;, &amp;quot;num&amp;quot;), 
         sep = &amp;quot;(?&amp;lt;=[A-Za-z])(?=[0-9])&amp;quot;) 
Time$Name&amp;lt;-master_df$Name[i]
result[[i]] &amp;lt;- Time
}
timevars = do.call(rbind.fill, result)
timevars = timevars[1:123,]
timevars&amp;lt;-timevars %&amp;gt;%
  spread(text, num)
timevars[is.na(timevars)]&amp;lt;-0
timevars&amp;lt;-subset(timevars, Name!=&amp;#39; Water Resource Management (PGGE11018)&amp;#39;)
timevars&amp;lt;-subset(timevars, Name!=&amp;#39; Epidemiology for Public Health (PUHR11016)&amp;#39;)

# merge with master df
master_df&amp;lt;-merge(master_df, timevars, by=&amp;quot;Name&amp;quot;, all.x=T)
master_df$Time&amp;lt;-NULL
master_df$NotEntered&amp;lt;-NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, onto the fun part, querying the data and producing graphs to present answers to the questions I was interested in. First letâ€™s see the percentage of courses that are 10 and 20 credits:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/MscCourses_files/figure-html/visualisation1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##    10.0    10.0    20.0    16.3    20.0    20.0&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;So we can see that 1/3 of the optional courses are currently 10 credits&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, I want to see how they relate to the degree clusters:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/MscCourses_files/figure-html/visualisation2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EOGM has the most unique master courses (10)&lt;/li&gt;
&lt;li&gt;EOGM and GIS share 11 courses&lt;/li&gt;
&lt;li&gt;There is only one course listed in all of the masters (Principles and Practice of Remote Sensing (PGGE11233))&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, Iâ€™m interested in the assessment breakdown (coursework, written exam and practical exam):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/MscCourses_files/figure-html/visualisation3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## 
## C0W100P0 C100W0P0 C40W60P0 C50W50P0 
##        2       18        2        5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, letâ€™s have a look at the learning outcomes, which will give me an understanding of the topics and skills that the student will have experience of by the end:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/MscCourses_files/figure-html/visualisation4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There is probably a lot more that can be done with the data but this is a just a taster. In addition, these are the optional course for Geosciences but this could be applied to other schools.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
