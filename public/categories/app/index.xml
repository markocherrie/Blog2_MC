<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>App on Researcher</title>
    <link>/categories/app/</link>
    <description>Recent content in App on Researcher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Mark Cherrie</copyright>
    <lastBuildDate>Fri, 30 Mar 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="/categories/app/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Devolved parliaments and assemblies Legislation</title>
      <link>/post/devolvedlegislation/</link>
      <pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/devolvedlegislation/</guid>
      <description>&lt;p&gt;Scotland, Wales and Northern Ireland have had devolved powers since 1997, 1997 and 1998 respectively. During this time 480 Acts have been passed, an act being defined as primary legislation which has been through several stages from:&lt;/p&gt;
&lt;hr /&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Pre-legislative scrutiny on the draft piece of legislation (bill)&lt;/li&gt;
&lt;li&gt;First Reading - first presentation, no voting&lt;/li&gt;
&lt;li&gt;Second Reading - debate on principles, voting&lt;/li&gt;
&lt;li&gt;Committee Stage - Considers bill clauses&lt;/li&gt;
&lt;li&gt;Consideration or report stage - Consider further amendments&lt;/li&gt;
&lt;li&gt;Third Reading - Consider final text&lt;/li&gt;
&lt;li&gt;Passage - Sent to other house (i.e. if created in commons to lords, vice versa)&lt;/li&gt;
&lt;li&gt;Consideration of Lords/Commons Amendments&lt;/li&gt;
&lt;li&gt;Royal Assent&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When working with longitudinal data it might be fruitful to identify legislation that may have had an effect on the behaviour or health of study participants. In particular, if you have study participants living across the UK, the acts orginating from the devolved parliaments might be interesting as they may be associated with differences in health/behaviour observed.&lt;/p&gt;
&lt;p&gt;Data are collected on all legislation passed in the UK on the &lt;a href=&#34;http://www.legislation.gov.uk&#34;&gt;legislation.gov.uk&lt;/a&gt; website. Some visualisation of this data has been done over time to show the frequency of legislation passed by year. However it’s quite tricky to identify when legislation has been passed across the devolved countries and how they relate to one another. The aim was to develop a visualisation to quickly identify legilsation from the devolved parliaments and assemblies.&lt;/p&gt;
&lt;p&gt;Firstly, the data from the website was scraped using a function called ‘legiscraper’:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(httr)
library(rvest)

# legislation scraper
legiscraper&amp;lt;-function(page, countrycode){
test&amp;lt;-read_html(paste0(&amp;quot;http://www.legislation.gov.uk/&amp;quot;, countrycode, &amp;quot;?page=&amp;quot;, page))
tableinfo &amp;lt;- html_nodes(test,&amp;#39;#content td&amp;#39;)
tableinfo &amp;lt;- html_text(tableinfo)
# Delete Welsh names which are causing problems
if(countrycode==&amp;quot;anaw&amp;quot;){
  toDelete &amp;lt;- seq(0, length(tableinfo), 4)
  tableinfo &amp;lt;- tableinfo[-toDelete]
} 
nrow&amp;lt;-length(grep(&amp;quot;^[0-9]&amp;quot;, tableinfo))
df &amp;lt;- data.frame(matrix(unlist(tableinfo), nrow=nrow, byrow=T),stringsAsFactors=FALSE)
return(df)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, the input options for the ‘legiscraper’ function were created and then the function was run for each country (n.b. I was counting the number of pages that the data was on, but will look into automating this in the future):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Scotland
library(plyr)
scotdf&amp;lt;-data.frame(page=1:14, countrycode=&amp;quot;asp&amp;quot;)
Scotland&amp;lt;-mdply(scotdf, legiscraper)
# Wales
walesdf&amp;lt;-data.frame(page=1:2, countrycode=&amp;quot;anaw&amp;quot;)
Wales&amp;lt;-mdply(walesdf, legiscraper)
# Northern Ireland 
nidf&amp;lt;-data.frame(page=1:9, countrycode=&amp;quot;nia&amp;quot;)
NorthernIreland&amp;lt;-mdply(nidf, legiscraper)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each dataframe was then binded and cleaned, before saving for each year:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# cleaning
library(stringr)
Legislationdf&amp;lt;-rbind(Scotland, Wales, NorthernIreland)
Legislationdf$Year&amp;lt;-as.numeric(substr(Legislationdf$X2, 1,4))
colnames(Legislationdf)&amp;lt;-c(&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;Legislationname&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;Parliament&amp;quot;, &amp;quot;Year&amp;quot;)
Legislationdf&amp;lt;-subset(Legislationdf, select=c(&amp;quot;Legislationname&amp;quot;, &amp;quot;Parliament&amp;quot;, &amp;quot;Year&amp;quot;))
Legislationdf&amp;lt;-Legislationdf[,c(1,3,2)]
# write .csv files
write.csv(Legislationdf, &amp;quot;LegislationAll.csv&amp;quot;, row.names=F)
for (i in 1999:2018){
  subsetdf&amp;lt;-subset(Legislationdf, year==i)
  write.csv(subsetdf, &amp;quot;Legislationdf&amp;quot;, i, &amp;quot;.csv&amp;quot;, row.names=F)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To create the shiny app, the user interface was defined as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(shiny)
library(networkD3)

ui &amp;lt;- fluidPage(
titlePanel(&amp;quot;Devolved Parliaments and Assemblies Legislation, by Year&amp;quot;),
  sidebarLayout(
    sidebarPanel(
     selectInput(&amp;quot;Year&amp;quot;, &amp;quot;Choose Year&amp;quot;, choices=c(&amp;quot;All&amp;quot;,&amp;quot;1999&amp;quot;, &amp;quot;2000&amp;quot;,      &amp;quot;2001&amp;quot;,&amp;quot;2002&amp;quot;, &amp;quot;2003&amp;quot;, &amp;quot;2004&amp;quot;, &amp;quot;2005&amp;quot;, &amp;quot;2006&amp;quot;, &amp;quot;2007&amp;quot;, &amp;quot;2008&amp;quot;,          &amp;quot;2009&amp;quot;,&amp;quot;2010&amp;quot;, &amp;quot;2011&amp;quot;, &amp;quot;2012&amp;quot;, &amp;quot;2013&amp;quot;,&amp;quot;2014&amp;quot;, &amp;quot;2015&amp;quot;, &amp;quot;2016&amp;quot;,           &amp;quot;2017&amp;quot;, &amp;quot;2018&amp;quot;)),
  actionButton(&amp;quot;click&amp;quot;, &amp;quot;Render&amp;quot;),
  downloadButton(&amp;quot;downloadData&amp;quot;, &amp;quot;Download&amp;quot;),
  helpText(&amp;quot;Data from http://www.legislation.gov.uk&amp;quot;)
    ),
  mainPanel(forceNetworkOutput(
  &amp;quot;forced&amp;quot;, width = &amp;quot;100%&amp;quot;, height = &amp;quot;700px&amp;quot;))
                ))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now onto the server side file. After packages and visualisation colour options were set, the data needed to be read in then subsetted based on the user’s ‘Year’ input. The trickiest part was formatting this data for the ‘networkD3’ package. Luckily there was a very good post on &lt;a href=&#34;https://bit.ly/2J7659N&#34;&gt;stackexchange&lt;/a&gt; by Peter Ellis, on how to create the input data and modify the colour of nodes. Some difficulties did arise from formatting (the imported csv variables were not in the same format as the in memory data), a &lt;a href=&#34;https://github.com/tidyverse/dplyr/issues/1388&#34;&gt;function name conflict&lt;/a&gt; and the order of node id’s. The fixes are detailed below. Finally, with an interactive app like this, the amount of data displayed differs, and so the options for display were based on whether the user picked the full or subsetted input. Code below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(shiny)
library(networkD3)
library(dplyr)

# Colour for the vis
ColourScale &amp;lt;- &amp;#39;d3.scaleOrdinal()
.domain([&amp;quot;Acts of the Scottish Parliament&amp;quot;, 
  &amp;quot;Acts of the National Assembly for Wales&amp;quot;, &amp;quot;Acts of the Northern Ireland Assembly&amp;quot;,&amp;quot;Year&amp;quot;])
  .range([&amp;quot;#FF6900&amp;quot;, &amp;quot;#694489&amp;quot;, &amp;quot;#ff0090&amp;quot;, &amp;quot;#888888&amp;quot;]);&amp;#39;

server &amp;lt;- function(input, output, session) {
  # year subset
  subset &amp;lt;- reactive({input$Year})  
  # on render click get the data
  data &amp;lt;- eventReactive(input$click, {
    read.csv(paste0(&amp;quot;Legislationdf&amp;quot;, subset(), &amp;quot;.csv&amp;quot;))
  })
  # download button
  output$downloadData &amp;lt;- downloadHandler(
    filename = function() {
      paste(&amp;quot;DevolvedLegislation.csv&amp;quot;, sep = &amp;quot;&amp;quot;)
    },
    content = function(file) {
      write.csv(data(), file, row.names = FALSE)
    }
  )
# Output 
  output$forced &amp;lt;- renderForceNetwork({
    # manipulate data
    master&amp;lt;-data()
    # when saved as &amp;#39;.csv&amp;#39; formatting went out the window
    master$Legislationname&amp;lt;-as.character(master$Legislationname)
    master$Year&amp;lt;-as.double(master$Year)
    master$Parliament&amp;lt;-as.character(master$Parliament)
    # now onto making the network input 
    src&amp;lt;-master[,1]
    target&amp;lt;-master[,2]
    networkData &amp;lt;- data.frame(src, target, stringsAsFactors = FALSE)
    networkData$target&amp;lt;-as.character(networkData$target)
    
    # nodes
    nodes &amp;lt;- data.frame(name = unique(c(as.character(src), target)), stringsAsFactors = FALSE)
    nodes$id &amp;lt;- 0:(nrow(nodes) - 1)
    
    # edges - notice &amp;#39;dplyr::&amp;#39; as there were some problems with rename... 
    library(dplyr)
      edges &amp;lt;- networkData %&amp;gt;%
      dplyr::left_join(nodes, by = c(&amp;quot;src&amp;quot; = &amp;quot;name&amp;quot;))%&amp;gt;%
      dplyr::select(-src) %&amp;gt;%
      dplyr::rename(source = id) %&amp;gt;%
      dplyr::left_join(nodes, by = c(&amp;quot;target&amp;quot; = &amp;quot;name&amp;quot;))%&amp;gt;%
      dplyr::select(-target) %&amp;gt;%
      dplyr::rename(target = id)
    
    edges$width &amp;lt;- 1

    # make a grouping variable that will match to colours
    mergenodes&amp;lt;-master[,c(1,3)]
    colnames(mergenodes)&amp;lt;-c(&amp;quot;name&amp;quot;, &amp;quot;Parliament&amp;quot;)
    nodes&amp;lt;-merge(nodes, mergenodes, by=&amp;quot;name&amp;quot;, all.x=T)
    nodes$Parliament[is.na(nodes$Parliament)]&amp;lt;-&amp;quot;Year&amp;quot;
    
    ##### This is CRUCIAL, they have to be ordered by id, or you won&amp;#39;t get what you expect...
    nodes &amp;lt;- nodes[order(nodes$id),] 

    # different display for all of the data vs year subset
if(nrow(master)==480){
  
  add=data.frame(source=c(499:481), target=c(498:480), width=0.5)
  edges&amp;lt;-rbind(edges, add)
  forceNetwork(Links = edges, Nodes = nodes, 
               Source = &amp;quot;source&amp;quot;,
               Target = &amp;quot;target&amp;quot;,
               linkDistance=100,
               NodeID =&amp;quot;name&amp;quot;,
               Group = &amp;quot;Parliament&amp;quot;,
               Value = &amp;quot;width&amp;quot;,
               opacity = 0.9,
               zoom = TRUE,
               charge=-5,
               legend=T,
               fontSize = 12,
               colourScale = JS(ColourScale))
}else{
    #### And for yearly subset 
    forceNetwork(Links = edges, Nodes = nodes, 
                 Source = &amp;quot;source&amp;quot;,
                 Target = &amp;quot;target&amp;quot;,
                 NodeID =&amp;quot;name&amp;quot;,
                 Group = &amp;quot;Parliament&amp;quot;,
                 Value = &amp;quot;width&amp;quot;,
                 opacity = 0.9,
                 linkDistance = 240,
                 fontSize = 15,
                 charge=-2,
                 zoom = TRUE,
                 opacityNoHover = 1,
                 legend=T,
                 colourScale = JS(ColourScale))
}
  })
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the final app:&lt;/p&gt;
&lt;iframe src=&#34;https://thebest.shinyapps.io/DevolvedLegislation/?showcase=0&#34; width=&#34;672&#34; height=&#34;600px&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Next steps are to look at whether the legilsation can be classified into groups meaninfully, or whether a node can act as a link to a webpage for more information.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nudging people to make healthy behaviour choices</title>
      <link>/post/rshiny-weather-app/</link>
      <pubDate>Fri, 22 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/rshiny-weather-app/</guid>
      <description>&lt;p&gt;Nudge theory made it big after the 2008 book by Thaler and Sunstein gathered some high profile readers (Obama, Cameron etc). Alongside public health officials and politicians, researchers have been interested in using the theory to influence people to make ‘healthy’ behaviour choices. The central tenant of the theory is based around libertarian paternalism, or influencing an individual’s ‘choice architecture’ without coercion. Nudge-type interventions (e.g. nutritional labeling, size of serving dishes) have been used to tackle &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4967524/&#34;&gt;obesity&lt;/a&gt; and were found to increase ‘healthy’ behaviours by 15.3%.&lt;/p&gt;
&lt;p&gt;Biometerology is the study of the impacts of the weather and climate on human health. The Met Office provide a cold weather &lt;a href=&#34;https://www.metoffice.gov.uk/public/weather/cold-weather-alert/#?tab=coldWeatherAlert&#34;&gt;alert&lt;/a&gt; to ensure that people with conditions susceptible to the cold (e.g. COPD) can take precautions, based on evidence of spikes in hospital admissions in weeks of &lt;a href=&#34;http://err.ersjournals.com/content/15/101/185.full&#34;&gt;cold weather - below 0°C&lt;/a&gt;. This kind of thing seems to be becoming more popular, with Facebook recently implementing weather information on their users’ timelines. I wondered whether I could replicate this type of nudge in an R Shiny application.&lt;/p&gt;
&lt;p&gt;In terms of data sources, the &lt;a href=&#34;https://www.metoffice.gov.uk/datapoint&#34;&gt;datapoint API&lt;/a&gt; available from the UK Met Office provides 3 hourly forecasts for a range of weather (e.g. temperature, UV, wind speed) for 5,000 UK sites (i.e. requires a script to determine closest station). Data from the Met Office goes through many rigorous checks and is reliable. Functions to query the datapoint API have been written in &lt;a href=&#34;https://pypi.python.org/pypi/datapoint/&#34;&gt;python&lt;/a&gt; and porting this to R is not a small task. Also, the datapoint API has been taken offline in recent months so that it can be updated (UPDATE 02/02/2018, it is now back online, and will be used in the future).&lt;/p&gt;
&lt;p&gt;In the interim I used weather data from the &lt;a href=&#34;https://www.wunderground.com/weather/api/&#34;&gt;Weather Underground API&lt;/a&gt;. This provides hourly weather forecasts for a given latitude and longitude and is available for locations around the world. The latitude and longitude was determined by the user’s smartphone or computer &lt;a href=&#34;https://github.com/AugustT/shiny_geolocation&#34;&gt;location&lt;/a&gt;. As this is a test, and I want to do a full literature review to ensure the best weather thresholds, I started with a trivial example - whether it is warm enough to wear shorts to work (arbitrarily set at over 15°C).&lt;/p&gt;
&lt;p&gt;Below is the code for the UI:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(shiny)
library(rwunderground)
shinyUI(fluidPage(
  titlePanel(&amp;quot;Shorts to work?&amp;quot;),
    tags$script(&amp;#39;
                $(document).ready(function () {
                navigator.geolocation.getCurrentPosition(onSuccess, onError);
                
                function onError (err) {
                Shiny.onInputChange(&amp;quot;geolocation&amp;quot;, false);
                }
                
                function onSuccess (position) {
                setTimeout(function () {
                var coords = position.coords;
                console.log(coords.latitude + &amp;quot;, &amp;quot; + coords.longitude);
                Shiny.onInputChange(&amp;quot;geolocation&amp;quot;, true);
                Shiny.onInputChange(&amp;quot;lat&amp;quot;, coords.latitude);
                Shiny.onInputChange(&amp;quot;long&amp;quot;, coords.longitude);
                }, 1100)
                }
                });
                &amp;#39;),
    
    # output message
    fluidRow(column(width = 2,
                    textOutput(&amp;quot;message&amp;quot;))
    ),
  tags$head(tags$style(HTML(&amp;quot;
                            #message {
                            font-size: 100px;
                            }
                            &amp;quot;)))
  
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the code for the server:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(shiny)
library(rwunderground)

shinyServer(function(input, output) {
  observe({
    if(!is.null(input$lat)){
    output$message &amp;lt;- renderText({
      location&amp;lt;-as.character(paste0(input$lat,&amp;quot;,&amp;quot;, input$long))
      ifelse(hourly(set_location(lat_long = location ), use_metric = TRUE, key = &amp;quot;&amp;quot;, raw = FALSE, message = FALSE)[2,2]&amp;gt;15, &amp;quot;YES&amp;quot;, &amp;quot;NO&amp;quot;)
      })
    }
      })
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the final app:&lt;/p&gt;
&lt;iframe src=&#34;https://thebest.shinyapps.io/shortstowork/?showcase=0&#34; width=&#34;672&#34; height=&#34;600px&#34;&gt;
&lt;/iframe&gt;
</description>
    </item>
    
  </channel>
</rss>
